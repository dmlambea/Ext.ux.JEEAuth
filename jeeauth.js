// (C) 2008, 2011, Daniel M. Lambea <dmlambea@gmail.com>

Ext.namespace('Ext.ux.JEEAuth');Ext.apply(Ext.ux.JEEAuth,{loginActionConfig:{text:'Login',tooltip:{title:'Login',text:'Log in using the provided credentials.'}},authMaskConfig:{msg:'Authenticating...'},validationErrorTitle:'Validation error',validationErrorText:'Marked fields are required.',blankText:'This field is required.',windowTitle:'Login',formAuthenticationURL:'j_security_check',usernameFieldLabel:'Username',passwordFieldLabel:'Password',usernameFieldName:'j_username',passwordFieldName:'j_password'});Ext.define('Ext.ux.JEEAuth.LoginWindow',{extend:'Ext.window.Window',jeeauthParams:undefined,loginForm:undefined,usernameField:undefined,passwordField:undefined,show:function(params){Ext.tip.QuickTipManager.init();this.jeeauthParams=params;this.callParent();this.passwordField.reset();this.loginForm.isValid();var focusFld=(this.usernameField.isValid()?this.passwordField:this.usernameField);focusFld.focus(true,100);},loginHandler:function(){if(!this.loginForm.isValid()){Ext.Msg.show({title:Ext.ux.JEEAuth.validationErrorTitle,msg:Ext.ux.JEEAuth.validationErrorText,icon:Ext.Msg.ERROR,buttons:Ext.Msg.OK});return;}
this.loginForm.submit({url:Ext.ux.JEEAuth.formAuthenticationURL,success:Ext.emptyfn,failure:Ext.emptyfn,params:{_auth_:true},jeeauthParams:this.jeeauthParams});this.hide();},initComponent:function(){var loginAction=new Ext.Action(Ext.apply({},{handler:this.loginHandler,scope:this},Ext.ux.JEEAuth.loginActionConfig));var loginFormPanel=new Ext.form.Panel({baseCls:'x-plain',defaultType:'textfield',items:[{fieldLabel:Ext.ux.JEEAuth.usernameFieldLabel,name:Ext.ux.JEEAuth.usernameFieldName,value:'',allowBlank:false,blankText:Ext.ux.JEEAuth.blankText,selectOnFocus:true,regex:/\S/i},{fieldLabel:Ext.ux.JEEAuth.passwordFieldLabel,inputType:'password',name:Ext.ux.JEEAuth.passwordFieldName,value:'',allowBlank:false,blankText:Ext.ux.JEEAuth.blankText,selectOnFocus:true}]});this.loginForm=loginFormPanel.getForm();this.usernameField=this.loginForm.findField(Ext.ux.JEEAuth.usernameFieldName);this.passwordField=this.loginForm.findField(Ext.ux.JEEAuth.passwordFieldName);this.usernameField.on('specialkey',function(f,e){if(e.getKey()===e.ENTER){this.passwordField.focus(true);}},this);this.passwordField.on('specialkey',function(f,e){if(e.getKey()===e.ENTER){loginAction.execute();}},this);Ext.applyIf(this,{layout:'fit',closeAction:'hide',closable:false,resizeable:false,plain:true,title:Ext.ux.JEEAuth.windowTitle,bodyStyle:'padding: 8px;',modal:true,items:loginFormPanel,buttons:[loginAction]});this.callParent(arguments);}});(function(){var authInProgress=false;var loginWindow;var ajaxRequestHandler=Ext.Ajax.request;var pendingRequests=[];var loadMask;function overridenCallback(options,success,response){var authRequest=false;if(loadMask&&loadMask.isVisible()){loadMask.hide();}
if(success===true){try{var result=Ext.decode(response.responseText);authRequest=(result.authRequest==='true');}catch(e1){authRequest=false;}}else{authRequest=(response.status===403);}
if(authRequest){if(authInProgress&&authInProgress!==options.jeeauthParams.ajaxId){pendingRequests.unshift(options.jeeauthParams.srcOpts);return;}
authInProgress=options.jeeauthParams.ajaxId;if(!loginWindow){loginWindow=new Ext.ux.JEEAuth.LoginWindow();}
loginWindow.show(options.jeeauthParams);}else{var justAuthenticated=authInProgress;authInProgress=false;options=options.jeeauthParams.srcOpts;if(!justAuthenticated){if(success===null||response===null){Ext.callback(options.callback,options.scope,[options,null,null]);}if(success){Ext.callback(options.success,options.scope,[response,options]);Ext.callback(options.callback,options.scope,[options,true,response]);}else{Ext.callback(options.failure,options.scope,[response,options]);Ext.callback(options.callback,options.scope,[options,false,response]);}}else{pendingRequests.unshift(options);}
var oldPendingRequests=pendingRequests;pendingRequests=[];for(var i=0;i<oldPendingRequests.length;i++){var opts=oldPendingRequests[i];try{overridenRequest.call(opts.scope||this,opts);}catch(e2){}
oldPendingRequests[i]=undefined;}}}
function overridenRequest(o){var authAttempt;try{authAttempt=o.scope.params._auth_;}catch(e){authAttempt=false;}
if(authInProgress&&!authAttempt){pendingRequests.push(o);return;}
var jeeauthParams={};if(!authAttempt){Ext.apply(jeeauthParams,{ajaxId:Ext.id(),srcOpts:Ext.apply({},o)});}else{jeeauthParams=o.scope.jeeauthParams;delete o.scope.jeeauthParams;if(!loadMask){loadMask=new Ext.LoadMask(Ext.getBody(),Ext.apply({},Ext.ux.JEEAuth.authMaskConfig));}
loadMask.show();}
o.callback=overridenCallback;o.jeeauthParams=jeeauthParams;delete o.success;delete o.failure;ajaxRequestHandler.call(Ext.Ajax,o);}
Ext.Ajax.request=overridenRequest;}());